
==================== FINAL INTERFACE ====================
2017-11-28 21:51:14.262835151 UTC

interface Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ:BadMonoid 8002
  interface hash: 387f257f374a558eac4ae14374d776fc
  ABI hash: 7ba41fd2e9c619979460fa9e2b92cfb1
  export-list hash: 9eb1b552c581d92090c3715ee715d200
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  BadMonoid.Bull{BadMonoid.Fools BadMonoid.Twoo}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-4.9.1.0:Text.Show.Functions
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH:Test.QuickCheck.Checkers
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Arbitrary 0e953baf64c505f1557b2f8788d63173
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck.Gen f58893849fb1d103be122a409ecfc455
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH:Test.QuickCheck.Checkers 5c008aab7648aa5f2abf4a2988498754
import  -/  checkers-0.4.9.5@checkers-0.4.9.5-Dhm0rh3Bh7qFXgfQ8Df9YH:Test.QuickCheck.Classes 299c87580860c205b01dd2588a41cffe
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull ::
    Test.QuickCheck.Arbitrary.Arbitrary BadMonoid.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.$fArbitraryBull_$carbitrary
                  BadMonoid.$fArbitraryBull_$s$dmshrink -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull1 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
                   BadMonoid.$fArbitraryBull6
                   BadMonoid.$fArbitraryBull2) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull2 ::
    [(GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
                   BadMonoid.$fArbitraryBull3
                   (GHC.Types.[]
                      @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull))) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
  {- HasNoCafRefs,
     Unfolding: ((BadMonoid.$fArbitraryBull5,
                  BadMonoid.$fArbitraryBull4
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <BadMonoid.Bull>_R)))) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 BadMonoid.Twoo) -}
165f540eacd7e4bb5f85a00a1c5b0934
  $fArbitraryBull5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull6 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen BadMonoid.Bull)
  {- HasNoCafRefs,
     Unfolding: ((BadMonoid.$fArbitraryBull5,
                  BadMonoid.$fArbitraryBull7
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <BadMonoid.Bull>_R)))) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull7 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 BadMonoid.Fools) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull_$carbitrary ::
    Test.QuickCheck.Gen.Gen BadMonoid.Bull
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ BadMonoid.Bull
                   BadMonoid.$fArbitraryBull1) -}
9484e4c604935332e64fa9879f89c4de
  $fArbitraryBull_$s$dmshrink :: BadMonoid.Bull -> [BadMonoid.Bull]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ (ds1 :: BadMonoid.Bull) -> GHC.Types.[] @ BadMonoid.Bull) -}
9484e4c604935332e64fa9879f89c4de
  $fEqBull :: GHC.Classes.Eq BadMonoid.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull BadMonoid.$fEqBull_$c== BadMonoid.$fEqBull_$c/= -}
9484e4c604935332e64fa9879f89c4de
  $fEqBull_$c/= :: BadMonoid.Bull -> BadMonoid.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: BadMonoid.Bull) (b :: BadMonoid.Bull) ->
                 case a of wild {
                   BadMonoid.Fools
                   -> case b of wild1 {
                        BadMonoid.Fools -> GHC.Types.False
                        BadMonoid.Twoo -> GHC.Types.True }
                   BadMonoid.Twoo
                   -> case b of wild1 {
                        BadMonoid.Fools -> GHC.Types.True
                        BadMonoid.Twoo -> GHC.Types.False } }) -}
9484e4c604935332e64fa9879f89c4de
  $fEqBull_$c== :: BadMonoid.Bull -> BadMonoid.Bull -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BadMonoid.Bull) (ds1 :: BadMonoid.Bull) ->
                 case ds of wild {
                   BadMonoid.Fools
                   -> case ds1 of wild1 {
                        BadMonoid.Fools -> GHC.Types.True
                        BadMonoid.Twoo -> GHC.Types.False }
                   BadMonoid.Twoo
                   -> case ds1 of wild1 {
                        BadMonoid.Fools -> GHC.Types.False
                        BadMonoid.Twoo -> GHC.Types.True } }) -}
9484e4c604935332e64fa9879f89c4de
  $fEqPropBull :: Test.QuickCheck.Checkers.EqProp BadMonoid.Bull
  DFunId
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                BadMonoid.$fEqPropBull_$c=-=
                  `cast`
                (Sym (Test.QuickCheck.Checkers.N:EqProp[0] <BadMonoid.Bull>_N)) -}
9484e4c604935332e64fa9879f89c4de
  $fEqPropBull_$c=-= ::
    BadMonoid.Bull
    -> BadMonoid.Bull -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (a1 :: BadMonoid.Bull) (a' :: BadMonoid.Bull) ->
                 let {
                   x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                   = Test.QuickCheck.Property.protectResults
                       (Test.QuickCheck.Property.MkRose
                          @ Test.QuickCheck.Property.Result
                          (case a1 of wild {
                             BadMonoid.Fools
                             -> case a' of wild1 {
                                  BadMonoid.Fools -> Test.QuickCheck.Property.succeeded
                                  BadMonoid.Twoo -> Test.QuickCheck.Property.counterexample1 }
                             BadMonoid.Twoo
                             -> case a' of wild1 {
                                  BadMonoid.Fools -> Test.QuickCheck.Property.counterexample1
                                  BadMonoid.Twoo -> Test.QuickCheck.Property.succeeded } })
                          (GHC.Types.[]
                             @ (Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result)))
                 } in
                 (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                  x1)
                   `cast`
                 (Trans
                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                (Test.QuickCheck.Property.N:Prop[0])))
                      (Sym (Test.QuickCheck.Property.N:Property[0])))) -}
9484e4c604935332e64fa9879f89c4de
  $fMonoidBull :: GHC.Base.Monoid BadMonoid.Bull
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.Fools
                  BadMonoid.$fMonoidBull_$cmappend
                  BadMonoid.$fMonoidBull_$cmconcat -}
9484e4c604935332e64fa9879f89c4de
  $fMonoidBull_$cmappend ::
    BadMonoid.Bull -> BadMonoid.Bull -> BadMonoid.Bull
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: BadMonoid.Bull) (ds1 :: BadMonoid.Bull) ->
                 BadMonoid.Fools) -}
9484e4c604935332e64fa9879f89c4de
  $fMonoidBull_$cmconcat :: [BadMonoid.Bull] -> BadMonoid.Bull
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [BadMonoid.Bull]) ->
                 case eta of wild { DEFAULT -> BadMonoid.Fools }) -}
9484e4c604935332e64fa9879f89c4de
  $fShowBull :: GHC.Show.Show BadMonoid.Bull
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BadMonoid.Bull
                  BadMonoid.$fShowBull_$cshowsPrec
                  BadMonoid.$fShowBull_$cshow
                  BadMonoid.$fShowBull_$cshowList -}
9484e4c604935332e64fa9879f89c4de
  $fShowBull1 :: BadMonoid.Bull -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: BadMonoid.Bull) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   BadMonoid.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull3)
                        eta
                   BadMonoid.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull2)
                        eta }) -}
5b0e38a7bd8fcb9f052388c6155e91af
  $fShowBull2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Twoo"#) -}
fe45774c631c3368c1eebd8e0a5e3838
  $fShowBull3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fools"#) -}
9484e4c604935332e64fa9879f89c4de
  $fShowBull_$cshow :: BadMonoid.Bull -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: BadMonoid.Bull) ->
                 case x of wild {
                   BadMonoid.Fools -> BadMonoid.$fShowBull3
                   BadMonoid.Twoo -> BadMonoid.$fShowBull2 }) -}
9484e4c604935332e64fa9879f89c4de
  $fShowBull_$cshowList :: [BadMonoid.Bull] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BadMonoid.Bull
                   BadMonoid.$fShowBull1) -}
9484e4c604935332e64fa9879f89c4de
  $fShowBull_$cshowsPrec ::
    GHC.Types.Int -> BadMonoid.Bull -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: BadMonoid.Bull)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   BadMonoid.Fools
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull3)
                        eta
                   BadMonoid.Twoo
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n BadMonoid.$fShowBull2)
                        eta }) -}
bd448d2199efe32a8e153c89d6c1309b
  $tc'Fools :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1462217660542857150##
                   10404619746688671106##
                   BadMonoid.$trModule
                   BadMonoid.$tc'Fools1) -}
c1a00423a147202477f42996eac6e7e0
  $tc'Fools1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fools"#) -}
72df22edea552c48d51439ad0c8e8434
  $tc'Twoo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5002606619743450436##
                   2370312787138956207##
                   BadMonoid.$trModule
                   BadMonoid.$tc'Twoo1) -}
0542036117559752fda3f079166782b6
  $tc'Twoo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Twoo"#) -}
8ff788c13ce13131b19f432bf9702c8f
  $tcBull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16084036774773008828##
                   6338633553256187625##
                   BadMonoid.$trModule
                   BadMonoid.$tcBull1) -}
0063c28747d38a4df984cd0875bf194e
  $tcBull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bull"#) -}
dc6aff0c965a558cfde200320e774945
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BadMonoid.$trModule2
                   BadMonoid.$trModule1) -}
170cd384922fbd33b94318b36279c3c1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BadMonoid"#) -}
f25ffa86a56710630dba80b2e0616339
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ"#) -}
9484e4c604935332e64fa9879f89c4de
  data Bull = Fools | Twoo
instance Test.QuickCheck.Arbitrary.Arbitrary [BadMonoid.Bull]
  = BadMonoid.$fArbitraryBull
instance GHC.Classes.Eq [BadMonoid.Bull] = BadMonoid.$fEqBull
instance Test.QuickCheck.Checkers.EqProp [BadMonoid.Bull]
  = BadMonoid.$fEqPropBull
instance GHC.Base.Monoid [BadMonoid.Bull] = BadMonoid.$fMonoidBull
instance GHC.Show.Show [BadMonoid.Bull] = BadMonoid.$fShowBull
"SPEC/BadMonoid $dmshrink @ Bull" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                    BadMonoid.Bull)
  Test.QuickCheck.Arbitrary.$dmshrink @ BadMonoid.Bull $dArbitrary
  = BadMonoid.$fArbitraryBull_$s$dmshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

