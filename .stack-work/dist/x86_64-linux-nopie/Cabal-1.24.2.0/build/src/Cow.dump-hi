
==================== FINAL INTERFACE ====================
2017-11-28 18:26:14.854544252 UTC

interface Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ:Cow 8002
  interface hash: 5d0684d868c7ebef16c2db475c949ce6
  ABI hash: fcff46e8a6421a5fd19643cf8df2b358
  export-list hash: 7f64c6b0bae61812f601aa31b856c8e0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Cow.cowFromString
  Cow.cowFromString'
  Cow.cowFromString''
  Cow.noEmpty
  Cow.noNegative
  Cow.Cow{Cow.Cow age name weight}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
179e147c331efdbc7868189494b03f6f
  $fEqCow :: GHC.Classes.Eq Cow.Cow
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Cow.Cow Cow.$fEqCow_$c== Cow.$fEqCow_$c/= -}
179e147c331efdbc7868189494b03f6f
  $fEqCow_$c/= :: Cow.Cow -> Cow.Cow -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(U),1*U(U))><S(SLL),1*U(1*U,1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Cow.Cow) (b :: Cow.Cow) ->
                 case Cow.$fEqCow_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
179e147c331efdbc7868189494b03f6f
  $fEqCow_$c== :: Cow.Cow -> Cow.Cow -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(U),1*U(U))><S(SLL),1*U(1*U,1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Cow.Cow) (w1 :: Cow.Cow) ->
                 case w of ww { Cow.Cow ww1 ww2 ww3 ->
                 case w1 of ww4 { Cow.Cow ww5 ww6 ww7 ->
                 Cow.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
179e147c331efdbc7868189494b03f6f
  $fShowCow :: GHC.Show.Show Cow.Cow
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cow.Cow
                  Cow.$fShowCow_$cshowsPrec
                  Cow.$fShowCow_$cshow
                  Cow.$fShowCow_$cshowList -}
179e147c331efdbc7868189494b03f6f
  $fShowCow1 :: Cow.Cow -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Cow.Cow) (w1 :: GHC.Base.String) ->
                 case w of ww { Cow.Cow ww1 ww2 ww3 ->
                 Cow.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
ac7776e9fec412e29a0fb73ac95dce1e
  $fShowCow2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
3a70029ae52b347d5993bca893643e0a
  $fShowCow3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "weight = "#) -}
02b9e0b77a15fb73a2d381256319fc22
  $fShowCow4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "age = "#) -}
4700da9c90acdb3abc93b637d8e50a70
  $fShowCow5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
579def1ce0d3c186785b78082169da26
  $fShowCow6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name = "#) -}
1ea758f19227847ab372900ce98ff5f3
  $fShowCow7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cow {"#) -}
179e147c331efdbc7868189494b03f6f
  $fShowCow_$cshow :: Cow.Cow -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Cow.Cow) ->
                 Cow.$fShowCow_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
179e147c331efdbc7868189494b03f6f
  $fShowCow_$cshowList :: [Cow.Cow] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Cow.Cow Cow.$fShowCow1) -}
179e147c331efdbc7868189494b03f6f
  $fShowCow_$cshowsPrec :: GHC.Types.Int -> Cow.Cow -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Cow.Cow) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Cow.Cow ww3 ww4 ww5 ->
                 Cow.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
5dd063d589645cfffc60c4b5e1a40ab4
  $tc'Cow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13921967440076665845##
                   18292810024374406822##
                   Cow.$trModule
                   Cow.$tc'Cow1) -}
a2dd42946db8dcfc057dfe3e90e12b03
  $tc'Cow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cow"#) -}
f9a43a68b2e93756a361ce73b52ee4ec
  $tcCow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10476290050682302303##
                   1374562792293206652##
                   Cow.$trModule
                   Cow.$trModule1) -}
686eee077cbd2a10ae5d9dc9c796d4cf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Cow.$trModule2 Cow.$trModule1) -}
d40ba4f08b1a20ef424cf6ed281fb723
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cow"#) -}
1bdde983bce3642532ac8ec0a19ef2c6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ"#) -}
f0e10743c64facfb2796ad9a883715b6
  $w$c== ::
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U(U)><S,1*U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Types.Int) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww4 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } } } }) -}
88c3fc946d6810ceeffcedb0043811e4
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Cow.$fShowCow7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Cow.$fShowCow6
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Cow.$fShowCow5
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Cow.$fShowCow4
                                         (case ww2 of ww4 { GHC.Types.I# ww5 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0#
                                                 ww5
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Cow.$fShowCow5
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       Cow.$fShowCow3
                                                       (case ww3 of ww6 { GHC.Types.I# ww7 ->
                                                        case GHC.Show.$wshowSignedInt
                                                               0#
                                                               ww7
                                                               (GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Cow.$fShowCow2
                                                                  x) of ww8 { (#,#) ww9 ww10 ->
                                                        GHC.Types.:
                                                          @ GHC.Types.Char
                                                          ww9
                                                          ww10 } }))) of ww6 { (#,#) ww7 ww8 ->
                                          GHC.Types.: @ GHC.Types.Char ww7 ww8 } })))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
179e147c331efdbc7868189494b03f6f
  data Cow
    = Cow {name :: GHC.Base.String,
           age :: GHC.Types.Int,
           weight :: GHC.Types.Int}
7970d407554d3e0eb38a1a594a03b0c2
  age :: Cow.Cow -> GHC.Types.Int
  RecSel Left Cow.Cow
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cow.Cow) ->
                 case ds of wild { Cow.Cow ds1 ds2 ds3 -> ds2 }) -}
72f914afa5dd5d26c3cebaffe7daca2f
  cowFromString ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.Maybe Cow.Cow
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (\ (name' :: GHC.Base.String)
                   (age' :: GHC.Types.Int)
                   (weight' :: GHC.Types.Int) ->
                 case name' of wild {
                   [] -> GHC.Base.Nothing @ Cow.Cow
                   : ipv ipv1
                   -> case age' of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild2 {
                        GHC.Types.False -> GHC.Base.Nothing @ Cow.Cow
                        GHC.Types.True
                        -> case weight' of wild3 { GHC.Types.I# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 0#) of wild4 {
                             GHC.Types.False -> GHC.Base.Nothing @ Cow.Cow
                             GHC.Types.True
                             -> GHC.Base.Just @ Cow.Cow (Cow.Cow wild wild1 wild3) } } } } }) -}
91338eb708dc1fa7db996ca3f95c71e0
  cowFromString' ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.Maybe Cow.Cow
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (Cow.cowFromString) -}
784a2acfe11549868363ae1e454dca47
  cowFromString'' ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.Maybe Cow.Cow
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (Cow.cowFromString) -}
137d562739cbdfdb8c9f02e1d005cb36
  name :: Cow.Cow -> GHC.Base.String
  RecSel Left Cow.Cow
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cow.Cow) ->
                 case ds of wild { Cow.Cow ds1 ds2 ds3 -> ds1 }) -}
e5d6550f716b968ea529a112f5743879
  noEmpty :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ GHC.Base.String
                   : ipv ipv1 -> GHC.Base.Just @ GHC.Base.String wild }) -}
3ab0aad176422951bc843ed8a425eeed
  noNegative :: GHC.Types.Int -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 case n of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x 0#) of wild1 {
                   GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Int
                   GHC.Types.True -> GHC.Base.Just @ GHC.Types.Int wild } }) -}
8820720fc69b7da745a6ffabdc20d6dd
  weight :: Cow.Cow -> GHC.Types.Int
  RecSel Left Cow.Cow
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cow.Cow) ->
                 case ds of wild { Cow.Cow ds1 ds2 ds3 -> ds3 }) -}
instance [safe] GHC.Classes.Eq [Cow.Cow] = Cow.$fEqCow
instance [safe] GHC.Show.Show [Cow.Cow] = Cow.$fShowCow
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

