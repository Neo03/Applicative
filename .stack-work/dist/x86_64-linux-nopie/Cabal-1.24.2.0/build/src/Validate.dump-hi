
==================== FINAL INTERFACE ====================
2017-11-28 18:26:13.209684299 UTC

interface Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ:Validate 8002
  interface hash: bfe59ed972227dde7309bee13ba27a49
  ABI hash: df0df8d70acea51950f4147f68ca747a
  export-list hash: 8c599e5f6dc4db65792073072b647669
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05c6dca22f9dd1832b6d5a0e6ea172a8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Validate.mkAddress
  Validate.mkName
  Validate.mkPerson
  Validate.validateLength
  Validate.Address{Validate.Address}
  Validate.Name{Validate.Name}
  Validate.Person{Validate.Person}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
316d74a88e46551588b62e5a91707c3a
  $fEqAddress :: GHC.Classes.Eq Validate.Address
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Address
                  Validate.$fEqAddress_$c==
                  Validate.$fEqAddress_$c/= -}
316d74a88e46551588b62e5a91707c3a
  $fEqAddress_$c/= ::
    Validate.Address -> Validate.Address -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=1
                  `cast`
                (Sym (Validate.N:Address[0])
                 ->_R Sym (Validate.N:Address[0])
                 ->_R <GHC.Types.Bool>_R) -}
316d74a88e46551588b62e5a91707c3a
  $fEqAddress_$c== ::
    Validate.Address -> Validate.Address -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.eqString
                  `cast`
                (Sym (Validate.N:Address[0])
                 ->_R Sym (Validate.N:Address[0])
                 ->_R <GHC.Types.Bool>_R) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fEqName :: GHC.Classes.Eq Validate.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Name Validate.$fEqName_$c== Validate.$fEqName_$c/= -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fEqName_$c/= :: Validate.Name -> Validate.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=1
                  `cast`
                (Sym (Validate.N:Name[0])
                 ->_R Sym (Validate.N:Name[0])
                 ->_R <GHC.Types.Bool>_R) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fEqName_$c== :: Validate.Name -> Validate.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.eqString
                  `cast`
                (Sym (Validate.N:Name[0])
                 ->_R Sym (Validate.N:Name[0])
                 ->_R <GHC.Types.Bool>_R) -}
f0584d77d1e5218caf7421c82025784f
  $fEqPerson :: GHC.Classes.Eq Validate.Person
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Person
                  Validate.$fEqPerson_$c==
                  Validate.$fEqPerson_$c/= -}
f0584d77d1e5218caf7421c82025784f
  $fEqPerson_$c/= ::
    Validate.Person -> Validate.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Validate.Person) (w1 :: Validate.Person) ->
                 case w of ww { Validate.Person ww1 ww2 ->
                 case w1 of ww3 { Validate.Person ww4 ww5 ->
                 Validate.$w$c/= ww1 ww2 ww4 ww5 } }) -}
f0584d77d1e5218caf7421c82025784f
  $fEqPerson_$c== ::
    Validate.Person -> Validate.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Validate.Person) (w1 :: Validate.Person) ->
                 case w of ww { Validate.Person ww1 ww2 ->
                 case w1 of ww3 { Validate.Person ww4 ww5 ->
                 Validate.$w$c== ww1 ww2 ww4 ww5 } }) -}
316d74a88e46551588b62e5a91707c3a
  $fShowAddress :: GHC.Show.Show Validate.Address
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Address
                  Validate.$fShowAddress_$cshowsPrec
                  Validate.$fShowAddress_$cshow
                  Validate.$fShowAddress_$cshowList -}
316d74a88e46551588b62e5a91707c3a
  $fShowAddress1 :: Validate.Address -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Validate.Address) (w1 :: GHC.Base.String) ->
                 Validate.$w$cshowsPrec 0# w w1) -}
4cb99142f18f0c1bd33848ae84e407ba
  $fShowAddress2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Address "#) -}
316d74a88e46551588b62e5a91707c3a
  $fShowAddress_$cshow :: Validate.Address -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Validate.Address) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Validate.$fShowAddress2)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         x `cast` (Validate.N:Address[0])
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
316d74a88e46551588b62e5a91707c3a
  $fShowAddress_$cshowList :: [Validate.Address] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Validate.Address
                   Validate.$fShowAddress1) -}
316d74a88e46551588b62e5a91707c3a
  $fShowAddress_$cshowsPrec ::
    GHC.Types.Int -> Validate.Address -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Validate.Address)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Validate.$w$cshowsPrec ww1 w1 w2 }) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fShowName :: GHC.Show.Show Validate.Name
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Name
                  Validate.$fShowName_$cshowsPrec
                  Validate.$fShowName_$cshow
                  Validate.$fShowName_$cshowList -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fShowName1 :: Validate.Name -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Validate.Name) (w1 :: GHC.Base.String) ->
                 Validate.$w$cshowsPrec1 0# w w1) -}
1b7a56b3a9dc45e45d72f291e19efbc3
  $fShowName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Name "#) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fShowName_$cshow :: Validate.Name -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Validate.Name) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Validate.$fShowName2)
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows6
                      (GHC.Show.showLitString
                         x `cast` (Validate.N:Name[0])
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows6
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fShowName_$cshowList :: [Validate.Name] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Validate.Name
                   Validate.$fShowName1) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $fShowName_$cshowsPrec ::
    GHC.Types.Int -> Validate.Name -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Validate.Name)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Validate.$w$cshowsPrec1 ww1 w1 w2 }) -}
f0584d77d1e5218caf7421c82025784f
  $fShowPerson :: GHC.Show.Show Validate.Person
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Validate.Person
                  Validate.$fShowPerson_$cshowsPrec
                  Validate.$fShowPerson_$cshow
                  Validate.$fShowPerson_$cshowList -}
f0584d77d1e5218caf7421c82025784f
  $fShowPerson1 :: Validate.Person -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Validate.Person) (w1 :: GHC.Base.String) ->
                 case w of ww { Validate.Person ww1 ww2 ->
                 Validate.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
f48e073258d5410047ca65e44fbaf7db
  $fShowPerson2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Person "#) -}
f0584d77d1e5218caf7421c82025784f
  $fShowPerson_$cshow :: Validate.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Validate.Person) ->
                 Validate.$fShowPerson_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f0584d77d1e5218caf7421c82025784f
  $fShowPerson_$cshowList :: [Validate.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Validate.Person
                   Validate.$fShowPerson1) -}
f0584d77d1e5218caf7421c82025784f
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> Validate.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Validate.Person)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Validate.Person ww3 ww4 ->
                 Validate.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
35cdb8cf4e70b61a883d25d7c9e3bac4
  $tc'Address :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1173313688698316167##
                   11609756608450276048##
                   Validate.$trModule
                   Validate.$tc'Address1) -}
75038caa27f2bc520c2ae9be1fd5dd37
  $tc'Address1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Address"#) -}
6243c558723786f599d386572ceec091
  $tc'Name :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   694417544458086372##
                   170387343429278359##
                   Validate.$trModule
                   Validate.$tc'Name1) -}
6fa3871aae5d0fef7f4c0be51798b670
  $tc'Name1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Name"#) -}
83713a4a7ea4b44893d2417784f68000
  $tc'Person :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16205909381670883372##
                   4441814630397577106##
                   Validate.$trModule
                   Validate.$tc'Person1) -}
e9e8a8979f20aea9602f7b65a908fcee
  $tc'Person1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Person"#) -}
ddcb5027ad01b5830b16a38bfa9386f1
  $tcAddress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4881915043400689897##
                   16991701531400114098##
                   Validate.$trModule
                   Validate.$tcAddress1) -}
33116e1a6e70a958e580017b27f1d616
  $tcAddress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Address"#) -}
f962894061445c3153694fb1d6d509ac
  $tcName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4679206513789735205##
                   7049561198853192834##
                   Validate.$trModule
                   Validate.$tcName1) -}
7bb528a7a3992dc72518a54a8ed0a47f
  $tcName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Name"#) -}
2990f9e25023dd610bf1ed77ac25b2a4
  $tcPerson :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3357082910900366521##
                   5168760055506140980##
                   Validate.$trModule
                   Validate.$tcPerson1) -}
0b064bf847873e65458534751e1f9049
  $tcPerson1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Person"#) -}
7ada075435918ac6d2c5f5ca1ee80188
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Validate.$trModule2
                   Validate.$trModule1) -}
64047b0b74cf701bd1592261a42e5e87
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Validate"#) -}
9f53fd1bf927e41b9164712015ffda34
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Applicative-0.1.0.0-L8nvUais0sN4TbsZHnF7lQ"#) -}
5d0135eb15af352123395d1ce5c2e8e7
  $w$c/= ::
    Validate.Name
    -> Validate.Address
    -> Validate.Name
    -> Validate.Address
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Validate.Name)
                   (ww1 :: Validate.Address)
                   (ww2 :: Validate.Name)
                   (ww3 :: Validate.Address) ->
                 case GHC.Base.eqString
                        ww `cast` (Validate.N:Name[0])
                        ww2 `cast` (Validate.N:Name[0]) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Base.eqString
                             ww1 `cast` (Validate.N:Address[0])
                             ww3 `cast` (Validate.N:Address[0]) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
dd762155e65ae53fcea55b6de104bfe7
  $w$c== ::
    Validate.Name
    -> Validate.Address
    -> Validate.Name
    -> Validate.Address
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Validate.Name)
                   (ww1 :: Validate.Address)
                   (ww2 :: Validate.Name)
                   (ww3 :: Validate.Address) ->
                 case GHC.Base.eqString
                        ww `cast` (Validate.N:Name[0])
                        ww2 `cast` (Validate.N:Name[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Base.eqString
                        ww1 `cast` (Validate.N:Address[0])
                        ww3 `cast` (Validate.N:Address[0]) }) -}
316d74a88e46551588b62e5a91707c3a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Validate.Address -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Validate.Address)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Validate.$fShowAddress2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              w `cast` (Validate.N:Address[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Validate.$fShowAddress2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 w `cast` (Validate.N:Address[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }) -}
aa58da115a2a51bca5c9a87a7a62d30e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Validate.Name -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Validate.Name)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Validate.$fShowName2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              w `cast` (Validate.N:Name[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Validate.$fShowName2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 w `cast` (Validate.N:Name[0])
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))))) }) -}
79401a9960b948b06d0f25f7f9f47a8a
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Validate.Name
    -> Validate.Address
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Validate.Name)
                   (ww2 :: Validate.Address)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Validate.$fShowPerson2
                       (Validate.$w$cshowsPrec1
                          11#
                          ww1
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (Validate.$w$cshowsPrec 11# ww2 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
316d74a88e46551588b62e5a91707c3a
  newtype Address = Address GHC.Base.String
aa58da115a2a51bca5c9a87a7a62d30e
  newtype Name = Name GHC.Base.String
f0584d77d1e5218caf7421c82025784f
  data Person = Person Validate.Name Validate.Address
47ae140b9536900fa3f78003fd25f4fa
  mkAddress :: GHC.Base.String -> GHC.Base.Maybe Validate.Address
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 100#) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ Validate.Address
                        s `cast` (Sym (Validate.N:Address[0]))
                   GHC.Types.True -> GHC.Base.Nothing @ Validate.Address } }) -}
0bbe2007ed1288e1f8b64f6e7fbb67a0
  mkName :: GHC.Base.String -> GHC.Base.Maybe Validate.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 25#) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ Validate.Name
                        s `cast` (Sym (Validate.N:Name[0]))
                   GHC.Types.True -> GHC.Base.Nothing @ Validate.Name } }) -}
7410f56902bd08741ac5e19d62a0f756
  mkPerson ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.Maybe Validate.Person
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>,
     Unfolding: (\ (n :: GHC.Base.String) (a :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char n 0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 25#) of wild {
                   GHC.Types.False
                   -> case GHC.List.$wlenAcc @ GHC.Types.Char a 0# of ww1 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># ww1 100#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Validate.Person
                             (Validate.Person
                                n `cast` (Sym (Validate.N:Name[0]))
                                a `cast` (Sym (Validate.N:Address[0])))
                        GHC.Types.True -> GHC.Base.Nothing @ Validate.Person } }
                   GHC.Types.True -> GHC.Base.Nothing @ Validate.Person } }) -}
953d4ecbe8c01d17ba6c7b5649d829f2
  validateLength ::
    GHC.Types.Int -> GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (maxLength :: GHC.Types.Int) (s :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char s 0# of ww2 { DEFAULT ->
                 case maxLength of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 y) of wild {
                   GHC.Types.False -> GHC.Base.Just @ GHC.Base.String s
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Base.String } } }) -}
instance [safe] GHC.Classes.Eq [Validate.Address]
  = Validate.$fEqAddress
instance [safe] GHC.Classes.Eq [Validate.Name] = Validate.$fEqName
instance [safe] GHC.Classes.Eq [Validate.Person]
  = Validate.$fEqPerson
instance [safe] GHC.Show.Show [Validate.Address]
  = Validate.$fShowAddress
instance [safe] GHC.Show.Show [Validate.Name] = Validate.$fShowName
instance [safe] GHC.Show.Show [Validate.Person]
  = Validate.$fShowPerson
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

